@page "/"
@inject StateService StateService;
@inject ChessNavigationManager NavigationManager;

<div class="flex flex--centered full-viewport">
    <form @onsubmit="Next" @onsubmit:preventDefault="true">
        <h1>What is your name?</h1>
        @if (savedUsers.Length == 0 || differentName)
        {
            <div>
                <div class="padding--horizontal">
                    <MatTextField @bind-Value="@name" Label="Your name" FullWidth="true" Required="true" @ref="nameTextField"/>
                </div>
                <footer class="padding--horizontal flex flex--end">
                    <MatButton type="submit">
                        Next
                    </MatButton>
                </footer>
            </div>
        }
        else
        {
            <MatList SingleSelection="true">
                @foreach (var u in savedUsers)
                {
                    <MatListItem OnClick="() => Next(u)">
                        @u.Name
                    </MatListItem>
                }
                <MatListItem OnClick="SetDifferentName">
                    Different...
                </MatListItem>
            </MatList>
        }

    </form>
</div>

@code
{
    private string name = "";
    private User[] savedUsers = Array.Empty<User>();
    private MatTextField<string> nameTextField;
    private bool differentName;

    private void Next()
    {
        Next(StateService.SubmitUserName(name));
    }
    
    private void Next(User user)
    {
        NavigationManager.NavigateToPuzzlesProgress(user.Id);
    }

    protected override void OnInitialized()
    {
        savedUsers = StateService.GetUsers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FocusNameInput();
        }
    }

    private async Task SetDifferentName()
    {
        differentName = true;
        StateHasChanged();
        await Task.Delay(1);
        await FocusNameInput();
    }
    
    private async Task FocusNameInput()
    {
        if (nameTextField != null)
        {
            await nameTextField.InputRef.FocusAsync();
        }
    }
}