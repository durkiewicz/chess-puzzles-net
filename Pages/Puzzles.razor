@page "/puzzles"
@inject PuzzleRepository PuzzleRepo;
@inject FenParser FenParser;

<div class="puzzle">
    <div class="puzzle__info-panel">
        <h1>Mat w 1 posuniÄ™ciu.</h1>
        <h2>@subCategory</h2>
        <h3>Zadanie @(currentIndex + 1) / @puzzles.Length</h3>
    </div>
    <div class="puzzle__board">
        <ChessGame PiecesPositions="@piecesPositions" ColorToMove="@colorToMove" PieceMoved="@PieceMoved"/>
    </div>
</div>
<CoverWithIcon Visible="showCoverWithIcon" Icon="showCoverWithIconType"/>


@code {
    private string subCategory = "";
    private Puzzle[] puzzles;
    private int currentIndex = 0;
    private Puzzle CurrentPuzzle => puzzles[CurrentIndex];
    private IEnumerable<PiecePosition> piecesPositions = Enumerable.Empty<PiecePosition>();
    private Color colorToMove = Color.White;
    private bool showCoverWithIcon;
    private CoverWithIcon.IconType showCoverWithIconType;

    private int CurrentIndex
    {
        get => currentIndex;
        set
        {
            currentIndex = value;
            piecesPositions = FenParser.GetPiecesPositions(CurrentPuzzle.Fen);
            colorToMove = FenParser.GetColorToMove(CurrentPuzzle.Fen);
        }
    }
    
    protected override void OnInitialized()
    {
        subCategory = PuzzleRepo.SubCategories.FirstOrDefault();
        puzzles = PuzzleRepo.GetPuzzlesForSubCategory(subCategory).ToArray();
        CurrentIndex = 0;
    }

    private async Task PieceMoved(Move move)
    {
        piecesPositions = piecesPositions
            .Select(p => p.Square == move.From ? p with { Square = move.To } : p)
            .ToList();
        await Task.Delay(1000);
        showCoverWithIconType = move.IsCheckMate ? CoverWithIcon.IconType.ThumbsUp : CoverWithIcon.IconType.ThumbsDown;
        showCoverWithIcon = true;
        StateHasChanged();
        await Task.Delay(500);
        showCoverWithIcon = false;
        if (move.IsCheckMate)
        {
            if (CurrentIndex < puzzles.Length)
            {
                CurrentIndex++;
            }    
        }
        else
        {
            piecesPositions = FenParser.GetPiecesPositions(CurrentPuzzle.Fen);
        }
    }
}
