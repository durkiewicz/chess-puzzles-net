@page "/user/{UserId:int}/puzzles/{SetId:int}"

@using System.Diagnostics
@inject PuzzleRepository PuzzleRepo;
@inject FenParser FenParser;
@inject StateService StateService;
@inject ChessNavigationManager NavigationManager;

<div class="puzzle">
    <div class="puzzle__info-panel">
        <h1>@subCategory</h1>
        <div class="padding--horizontal">
            Daj mata w 1 posuniÄ™ciu.
        </div>
        <div class="padding--horizontal">
            Zadanie @(currentIndex + 1) / @puzzles.Length
        </div>
    </div>
    <div class="puzzle__board">
        <ChessGame PiecesPositions="@piecesPositions" ColorToMove="@colorToMove" PieceMoved="@PieceMoved"/>
    </div>
</div>
<CoverWithIcon Visible="showCoverWithIcon" Icon="showCoverWithIconType"/>


@code {
    private string subCategory = "";
    private string[] puzzles;
    private int currentIndex = 0;
    private string CurrentPuzzle => puzzles[CurrentIndex];
    private IEnumerable<PiecePosition> piecesPositions = Enumerable.Empty<PiecePosition>();
    private Color colorToMove = Color.White;
    private bool showCoverWithIcon;
    private CoverWithIcon.IconType showCoverWithIconType;
    private readonly Stopwatch stopwatch = new();
    private int numberOfFailures = 0;
    
    [Parameter]
    public int SetId { get; set; } = 1;
    
    [Parameter]
    public int? UserId { get; set; }
    
    private int CurrentIndex
    {
        get => currentIndex;
        set
        {
            currentIndex = value;
            piecesPositions = FenParser.GetPiecesPositions(CurrentPuzzle);
            colorToMove = FenParser.GetColorToMove(CurrentPuzzle);
        }
    }

    protected override void OnInitialized()
    {
        if (!UserId.HasValue)
        {
            NavigationManager.NavigateToIndex();
        }
        subCategory = PuzzleRepo.GetTitle(SetId);
        puzzles = PuzzleRepo.GetPuzzlesBySetId(SetId).ToArray();
        CurrentIndex = 0;
        stopwatch.Start();
    }

    private async Task PieceMoved(Move move)
    {
        piecesPositions = piecesPositions
            .Select(p =>
                p.Square == move.From
                    ? p with {
                        Square = move.To,
                        Piece = move.IsPromotion ? move.PromotionPiece ?? p.Piece : p.Piece
                    }
                    : p
            )
            .ToList();
        await ShowThumbsUpOrDown(move.IsCheckMate);
        if (move.IsCheckMate)
        {
            if (CurrentIndex < puzzles.Length - 1)
            {
                CurrentIndex++;
            }
            else
            {
                stopwatch.Stop();
                StateService.SubmitSolvedPuzzleSet(new(
                    SetId,
                    UserId.Value,
                    numberOfFailures,
                    stopwatch.ElapsedMilliseconds / 1000,
                    DateTime.UtcNow
                ));
                NavigationManager.NavigateToPuzzlesProgress(UserId.Value);
            }
        }
        else
        {
            numberOfFailures++;
            piecesPositions = FenParser.GetPiecesPositions(CurrentPuzzle);
        }
    }

    private async Task ShowThumbsUpOrDown(bool up)
    {
        await Task.Delay(1000);
        showCoverWithIconType = up ? CoverWithIcon.IconType.ThumbsUp : CoverWithIcon.IconType.ThumbsDown;
        showCoverWithIcon = true;
        StateHasChanged();
        await Task.Delay(500);
        showCoverWithIcon = false;
    }
}