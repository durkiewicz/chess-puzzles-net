@page "/user/{UserId:int}/puzzles-progress"
@inject StateService StateService;
@inject ChessNavigationManager NavigationManager;
@inject PuzzleRepository PuzzleRepo;
@inject ChessTheme Theme

<div class="flex flex--centered">
    <div>
        <h1>Hello, @userName!</h1>
        <div class="padding--horizontal">
            Which puzzles do you want to solve?
        </div>  
        <MatList SingleSelection="true" TwoLine="true">
            @foreach (var puzzleSet in puzzleSets)
            {
                <MatListItem OnClick="() => Choose(puzzleSet)" Class="flex flex--space-between progress__list-item">
                    <MatListItemText>
                        <MatListItemPrimaryText>@puzzleSet.Title</MatListItemPrimaryText>
                        <MatListItemSecondaryText>@SolutionText(puzzleSet)</MatListItemSecondaryText>
                    </MatListItemText>
                    <MatIcon Icon="@Icon(puzzleSet)" Style="@(IconStyle(puzzleSet))" />
                </MatListItem>
                <MatListDivider/>
            }
        </MatList>
    </div>
</div>

@code {
    private string userName;
    private IEnumerable<PuzzleSet> puzzleSets = Enumerable.Empty<PuzzleSet>();
    private Dictionary<int, SolvedPuzzleSet> solvedPuzzleSets = new ();
    
    [Parameter]
    public int? UserId { get; set; } = 1;
    
    protected override void OnInitialized()
    {
        if (UserId.HasValue)
        {
            userName = StateService.GetUserName(UserId.Value);
            puzzleSets = PuzzleRepo.PuzzleSets;
            var pairs = StateService.GetSolvedPuzzleSets()
                .Where(x => x.UserId == UserId)
                .GroupBy(x => x.SetId)
                .Select(group =>
                    KeyValuePair.Create(
                        group.Key,
                        group.OrderBy(x => x.NumberOfFailures)
                            .ThenBy(x => x.Time)
                            .First()
                        ));
            solvedPuzzleSets = new Dictionary<int, SolvedPuzzleSet>(pairs);
        }
        else
        {
            NavigationManager.NavigateToIndex();
        }
    }

    private void Choose(PuzzleSet puzzleSet)
    {
        NavigationManager.NavigateToPuzzles(UserId.Value, puzzleSet.Id);
    }

    private string SolutionText(PuzzleSet puzzleSet)
    {
        var solved = solvedPuzzleSets.GetValueOrDefault(puzzleSet.Id);
        return solved == null ? "Unsolved" : solved.GetDescription();
    }

    private string IconStyle(PuzzleSet puzzleSet)
    {
        var solved = solvedPuzzleSets.GetValueOrDefault(puzzleSet.Id);
        var color = solved == null ? "#CCC" : Theme.Theme.Primary;
        return $"color: {color}";
    }

    private string Icon(PuzzleSet puzzleSet)
    {
        var solved = solvedPuzzleSets.GetValueOrDefault(puzzleSet.Id);
        return solved switch
        {
            null => MatIconNames.Star_border,
            { NumberOfFailures: 0 } => MatIconNames.Star,
            {} => MatIconNames.Star_half,
        };
    }
}