@using ChessNET.Domain
@inject LegalMovesGenerator LegalMoves;

<Chessboard
    PiecesPositions="PiecesPositions"
    ShowPromotionsForSquare="@promotionsSquare"
    PieceSelected="PieceSelected"
    PieceDeselected="PieceDeselected"
    SquareClicked="SquareClicked"
    PiecePromoted="PiecePromoted"
    HighlightedSquares="HighlightedSquares"
    />

@code {
    private Move[] legalMoves = new Move[0];
    private PiecePosition selectedPiece;
    private Square promotionsSquare;
    
    [Parameter]
    public IEnumerable<PiecePosition> PiecesPositions { get; set; } = Enumerable.Empty<PiecePosition>();
    
    [Parameter]
    public Color ColorToMove { get; set; } = Color.White;

    [Parameter]
    public EventCallback<Move> PieceMoved { get; set; }

    private IEnumerable<Square> HighlightedSquares => legalMoves.Select(m => m.To).Distinct();
    
    private async Task PieceSelected(PiecePosition p)
    {
        selectedPiece = p;
        legalMoves = await LegalMoves.GetLegalMovesFromSquare(PiecesPositions, ColorToMove, p.Square);
    }

    private void PieceDeselected(PiecePosition p)
    {
        if (selectedPiece == p)
        {
            selectedPiece = null;
        }
    }

    private async Task SquareClicked(Square square)
    {
        var move = legalMoves.FirstOrDefault(m => m.To == square);
        if (move == null)
        {
            legalMoves = new Move[0];
            promotionsSquare = null;
        }
        else if (move.IsPromotion)
        {
            promotionsSquare = move.To;
        }
        else
        {
            await PieceMoved.InvokeAsync(move);
            legalMoves = new Move[0];
        }
    }

    private async Task PiecePromoted(Tuple<Square, Domain.Piece> fileAndPiece)
    {
        var (square, piece) = fileAndPiece;
        var move = legalMoves.FirstOrDefault(m => m.To == square && m.PromotionPiece == piece);
        promotionsSquare = null;
        legalMoves = new Move[0];
        if (move != null)
        {
            await PieceMoved.InvokeAsync(move);
        }
    }
}