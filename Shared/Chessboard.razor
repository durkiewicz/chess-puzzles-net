<div class="chessboard__wrapper">
    <div class="chessboard">
        @foreach (var p in PiecesPositions)
        {
            <Piece Position=@p IsSelected=@(selectedPiecePosition == p) OnClick="PieceClicked"/>
        }
    </div>
    <div class="chessboard">
        @foreach (var rank in Enumerable.Range(1, 8).Reverse())
        {
            @foreach (var file in Enumerable.Range(1, 8).Select(n => (File) n))
            {
                <SquareComponent Square="new Square(file, rank)" OnClick=@HandleSquareClick/>
            }
        }
    </div>
</div>

@code {
    private PiecePosition selectedPiecePosition;
    
    [Parameter]
    public Color ColorToMove { get; set; } = Color.White;
    
    [Parameter]
    public IEnumerable<PiecePosition> PiecesPositions { get; set; } = Enumerable.Empty<PiecePosition>();

    [Parameter]
    public Action<Square> SquareClicked { get; set; }
    
    [Parameter]
    public EventCallback<PiecePosition> PieceSelected { get; set; }
    
    [Parameter]
    public Action<PiecePosition> PieceDeselected { get; set; }
    
    private async Task PieceClicked(PiecePosition piece)
    {
        if (piece.Color == ColorToMove)
        {
            selectedPiecePosition = piece;
            await PieceSelected.InvokeAsync(piece);
        }
        else
        {
            DeselectPieceIfNeeded();
        }
    }

    private void HandleSquareClick(Square square)
    {
        DeselectPieceIfNeeded();
        SquareClicked?.Invoke(square);
    }

    private void DeselectPieceIfNeeded()
    {
        if (selectedPiecePosition == null) return;
        PieceDeselected?.Invoke(selectedPiecePosition);
        selectedPiecePosition = null;
    }
}