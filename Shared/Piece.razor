@using ChessNET.Domain

<div class="piece @SelectedClass @SelectableClass @PromotionClass"
    style="
        background-image: url(@BackgroundImageUrl);
        background-color: @(BackgroundColor ?? "transparent");
        transform: translate(@TranslateX%, @TranslateY%);
    "
    @onclick="HandleClick"
>
</div>

@code {
    [Parameter]
    public PiecePosition Position { get; set; }

    [Parameter]
    public EventCallback<PiecePosition> OnClick { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool IsSelectable { get; set; } = true;
    
    [Parameter]
    public bool IsPromotionPiece { get; set; }
    
    private string SelectedClass => IsSelected ? "piece--selected" : "";
    
    private string SelectableClass => IsSelectable ? "" : "piece--unselectable";
    
    private string PromotionClass => IsPromotionPiece ? "piece--promotion" : "";

    private string BackgroundColor => IsPromotionPiece ? "#fff" : "transparent";
    
    private string BackgroundImageUrl
    {
        get
        {
            var color = Position.Color == Color.White ? "w" : "b";
            return $"images/pieces/california/{color}{Position.Piece.GetLetterCode()}.svg";
        }
    }

    private int TranslateX => ((int) Position.Square.File - 1) * 100;

    private int TranslateY => (8 - Position.Square.Rank) * 100;

    private async Task HandleClick()
    {
        await OnClick.InvokeAsync(Position);
    }
}